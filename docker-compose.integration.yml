services:
  db_test:
    image: postgres:15.0-alpine
    container_name: WaitIt-db-test
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB_TEST}
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs: /var/lib/postgresql

  backend:
    container_name: WaitIt-backend
    depends_on:
      db_test:
        condition: service_healthy
    build: ./server
    ports:
      - 4000:4000
    volumes:
      - ./server/src:/app/src
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_DB_TEST: ${POSTGRES_DB_TEST}
      DB_PORT: ${DB_PORT}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      SERVER_HOST: ${SERVER_HOST}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: 'db_test'
      NODE_ENV: 'test'
    healthcheck:
      test: 'curl --fail --request GET -H ''content-type:application/json'' --url ''http://localhost:4000/graphql?query=%7B__typename%7D'''
      interval: 5s
      timeout: 5s
      retries: 10

  testrunner:
    container_name: WaitIt-testrunner
    build:
      context: .
      dockerfile: ./test/Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_DB_TEST: ${POSTGRES_DB_TEST}
      DB_PORT: ${DB_PORT}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      SERVER_HOST: ${SERVER_HOST}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: 'db_test'
    volumes:
      - ./server/src/entity:/server/src/entity
      - ./test/src:/app/src
